{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../../components/Layout\";\nimport Reviews from \"../../components/Reviews\";\n\nconst Restaurant = ({\n  eatery,\n  reviews\n}) => {\n  const {\n    name,\n    address\n  } = eatery;\n  console.log(reviews);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Reviews, _objectSpread({}, reviews), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  // get all restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json(); // Get the paths we want to pre-render based on restaurants\n\n  const paths = restaurants.data.map(restaurant => `/restaurants/${restaurant.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  var _reviewsJson$data;\n\n  const {\n    id\n  } = params;\n  const eateryResponse = await fetch(`http://localhost:8080/api/eateries/${id}`);\n  const reviewsResponse = await fetch(`http://localhost:8080/api/eateries/${id}/reviews`);\n  const eateryJson = await eateryResponse.json();\n  const reviewsJson = await reviewsResponse.json();\n  return {\n    props: {\n      eatery: eateryJson.data.attributes,\n      reviews: (_reviewsJson$data = reviewsJson.data) === null || _reviewsJson$data === void 0 ? void 0 : _reviewsJson$data.attributes\n    }\n  };\n}\nexport default Restaurant;","map":{"version":3,"sources":["/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js"],"names":["Layout","Reviews","Restaurant","eatery","reviews","name","address","console","log","getStaticPaths","response","fetch","restaurants","json","paths","data","map","restaurant","id","fallback","getStaticProps","params","eateryResponse","reviewsResponse","eateryJson","reviewsJson","props","attributes"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAyB;AAC1C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBH,MAA1B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA,gBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD,oBAAaF,OAAb;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAXD;;AAaA,OAAO,eAAeK,cAAf,GAAgC;AACrC;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA5B;AACA,QAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B,CAHqC,CAKrC;;AACA,QAAMC,KAAK,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,GAAjB,CACXC,UAAD,IAAiB,gBAAeA,UAAU,CAACC,EAAG,EADlC,CAAd,CANqC,CAUrC;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAAA;;AAC/C,QAAM;AAAEH,IAAAA;AAAF,MAASG,MAAf;AACA,QAAMC,cAAc,GAAG,MAAMX,KAAK,CAC/B,sCAAqCO,EAAG,EADT,CAAlC;AAGA,QAAMK,eAAe,GAAG,MAAMZ,KAAK,CAChC,sCAAqCO,EAAG,UADR,CAAnC;AAGA,QAAMM,UAAU,GAAG,MAAMF,cAAc,CAACT,IAAf,EAAzB;AACA,QAAMY,WAAW,GAAG,MAAMF,eAAe,CAACV,IAAhB,EAA1B;AAEA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLvB,MAAAA,MAAM,EAAEqB,UAAU,CAACT,IAAX,CAAgBY,UADnB;AAELvB,MAAAA,OAAO,uBAAEqB,WAAW,CAACV,IAAd,sDAAE,kBAAkBY;AAFtB;AADF,GAAP;AAMD;AAED,eAAezB,UAAf","sourcesContent":["import Layout from \"../../components/Layout\";\n\nimport Reviews from \"../../components/Reviews\";\n\nconst Restaurant = ({ eatery, reviews }) => {\n  const { name, address } = eatery;\n\n  console.log(reviews);\n  return (\n    <Layout>\n      <h1>{name}</h1>\n      <p>{address}</p>\n      <Reviews {...reviews} />\n    </Layout>\n  );\n};\n\nexport async function getStaticPaths() {\n  // get all restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json();\n\n  // Get the paths we want to pre-render based on restaurants\n  const paths = restaurants.data.map(\n    (restaurant) => `/restaurants/${restaurant.id}`\n  );\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }) {\n  const { id } = params;\n  const eateryResponse = await fetch(\n    `http://localhost:8080/api/eateries/${id}`\n  );\n  const reviewsResponse = await fetch(\n    `http://localhost:8080/api/eateries/${id}/reviews`\n  );\n  const eateryJson = await eateryResponse.json();\n  const reviewsJson = await reviewsResponse.json();\n\n  return {\n    props: {\n      eatery: eateryJson.data.attributes,\n      reviews: reviewsJson.data?.attributes,\n    },\n  };\n}\n\nexport default Restaurant;\n"]},"metadata":{},"sourceType":"module"}