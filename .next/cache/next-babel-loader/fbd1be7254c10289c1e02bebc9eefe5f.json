{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js\";\nimport Layout from \"../../components/Layout\";\n\nconst Restaurant = ({\n  name,\n  address\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  // get all restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json(); // Get the paths we want to pre-render based on restaurants\n\n  const paths = restaurants.data.map(restaurant => `/restaurants/${restaurant.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const response = await fetch(`http://localhost:8080/api/eateries/${params.id}`);\n  const json = await response.json();\n  return {\n    props: json.data.attributes\n  };\n}\nexport default Restaurant;","map":{"version":3,"sources":["/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js"],"names":["Layout","Restaurant","name","address","getStaticPaths","response","fetch","restaurants","json","paths","data","map","restaurant","id","fallback","getStaticProps","params","props","attributes"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AACxC,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;AASA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA5B;AACA,QAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B,CAHqC,CAKrC;;AACA,QAAMC,KAAK,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,GAAjB,CACXC,UAAD,IAAiB,gBAAeA,UAAU,CAACC,EAAG,EADlC,CAAd,CANqC,CAUrC;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMX,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCU,MAAM,CAACH,EAAG,EADtB,CAA5B;AAGA,QAAML,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AAEA,SAAO;AACLS,IAAAA,KAAK,EAAET,IAAI,CAACE,IAAL,CAAUQ;AADZ,GAAP;AAGD;AAED,eAAejB,UAAf","sourcesContent":["import Layout from \"../../components/Layout\";\n\nconst Restaurant = ({ name, address }) => {\n  return (\n    <Layout>\n      <h1>{name}</h1>\n      <p>{address}</p>\n    </Layout>\n  );\n};\n\nexport async function getStaticPaths() {\n  // get all restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json();\n\n  // Get the paths we want to pre-render based on restaurants\n  const paths = restaurants.data.map(\n    (restaurant) => `/restaurants/${restaurant.id}`\n  );\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }) {\n  const response = await fetch(\n    `http://localhost:8080/api/eateries/${params.id}`\n  );\n  const json = await response.json();\n\n  return {\n    props: json.data.attributes,\n  };\n}\n\nexport default Restaurant;\n"]},"metadata":{},"sourceType":"module"}