{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/components/Reviews.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// TODO:\n// Do we need this or can we just add the reviews information to the initial request?\nimport { useEffect, useState } from \"react\";\n\nvar Reviews = function Reviews(restaurantId) {\n  _s();\n\n  var _useState = useState([]),\n      reviews = _useState[0],\n      setReviews = _useState[1];\n\n  useEffect(function () {\n    getReviews();\n  }, []);\n\n  var getReviews = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"http://localhost:8080/api/eateries/\".concat(restaurantId, \"/reviews\"));\n\n            case 2:\n              response = _context.sent;\n              json = response.json();\n              setReviews(json);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getReviews() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  console.log(reviews);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: reviews.map(function (review) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: review\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Reviews, \"FPrwLLWcZBXrtWYcIRYMKBd2Ocw=\");\n\n_c = Reviews;\nexport default Reviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reviews\");","map":{"version":3,"sources":["/Users/chris/CodeProjects/gluten-free-advisor-frontend/components/Reviews.js"],"names":["useEffect","useState","Reviews","restaurantId","reviews","setReviews","getReviews","fetch","response","json","console","log","map","review"],"mappings":";;;;;;;;AAAA;AAEA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,YAAD,EAAkB;AAAA;;AAAA,kBACFF,QAAQ,CAAC,EAAD,CADN;AAAA,MACzBG,OADyB;AAAA,MAChBC,UADgB;;AAGhCL,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,UAAU;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMC,KAAK,8CACYJ,YADZ,cADX;;AAAA;AACXK,cAAAA,QADW;AAIXC,cAAAA,IAJW,GAIJD,QAAQ,CAACC,IAAT,EAJI;AAKjBJ,cAAAA,UAAU,CAACI,IAAD,CAAV;;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVH,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAQAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACA,sBACE;AAAA,2BACE;AAAA,gBACGA,OAAO,CAACQ,GAAR,CAAY,UAACC,MAAD;AAAA,4BACX;AAAA,oBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,iBADW;AAAA,OAAZ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CAzBD;;GAAMX,O;;KAAAA,O;AA2BN,eAAeA,OAAf","sourcesContent":["// TODO:\n\n// Do we need this or can we just add the reviews information to the initial request?\n\nimport { useEffect, useState } from \"react\";\n\nconst Reviews = (restaurantId) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getReviews();\n  }, []);\n\n  const getReviews = async () => {\n    const response = await fetch(\n      `http://localhost:8080/api/eateries/${restaurantId}/reviews`\n    );\n    const json = response.json();\n    setReviews(json);\n  };\n\n  console.log(reviews);\n  return (\n    <ul>\n      <li>\n        {reviews.map((review) => (\n          <li>{review}</li>\n        ))}\n      </li>\n    </ul>\n  );\n};\n\nexport default Reviews;\n"]},"metadata":{},"sourceType":"module"}