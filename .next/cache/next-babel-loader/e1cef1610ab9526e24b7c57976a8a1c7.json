{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js\";\nimport Layout from \"../../components/Layout\";\n\nconst Restaurant = ({\n  restaurant\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: \"Hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json(); // Get the paths we want to pre-render based on restaurants\n\n  const paths = restaurants.data.map(eateries => `/restaurants/${eateries.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const response = await fetch(`http://localhost:8080/api/eateries/${params.id}`);\n  const json = await response.json();\n  console.log(json);\n  return {\n    props: {\n      json\n    }\n  };\n}\nexport default Restaurant;","map":{"version":3,"sources":["/Users/chris/CodeProjects/gluten-free-advisor-frontend/pages/restaurants/[id].js"],"names":["Layout","Restaurant","restaurant","getStaticPaths","response","fetch","restaurants","json","paths","data","map","eateries","id","fallback","getStaticProps","params","console","log","props"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACrC,sBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;AAIA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA5B;AACA,QAAMC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA1B,CAHqC,CAKrC;;AACA,QAAMC,KAAK,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,GAAjB,CACXC,QAAD,IAAe,gBAAeA,QAAQ,CAACC,EAAG,EAD9B,CAAd,CANqC,CAUrC;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMX,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCU,MAAM,CAACH,EAAG,EADtB,CAA5B;AAGA,QAAML,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACA,SAAO;AACLW,IAAAA,KAAK,EAAE;AAAEX,MAAAA;AAAF;AADF,GAAP;AAGD;AAED,eAAeN,UAAf","sourcesContent":["import Layout from \"../../components/Layout\";\n\nconst Restaurant = ({ restaurant }) => {\n  return <Layout>Hi</Layout>;\n};\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get restaurants\n  const response = await fetch(\"http://localhost:8080/api/eateries\");\n  const restaurants = await response.json();\n\n  // Get the paths we want to pre-render based on restaurants\n  const paths = restaurants.data.map(\n    (eateries) => `/restaurants/${eateries.id}`\n  );\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }) {\n  const response = await fetch(\n    `http://localhost:8080/api/eateries/${params.id}`\n  );\n  const json = await response.json();\n\n  console.log(json);\n  return {\n    props: { json },\n  };\n}\n\nexport default Restaurant;\n"]},"metadata":{},"sourceType":"module"}